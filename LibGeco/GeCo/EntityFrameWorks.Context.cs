//------------------------------------------------------------------------------
// <auto-generated>
//     Codice generato da un modello.
//
//     Le modifiche manuali a questo file potrebbero causare un comportamento imprevisto dell'applicazione.
//     Se il codice viene rigenerato, le modifiche manuali al file verranno sovrascritte.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeCo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GeCoEntities : DbContext
    {
        public GeCoEntities()
            : base("name=GeCoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Corsi> Corsi { get; set; }
        public virtual DbSet<Iscrizioni> Iscrizioni { get; set; }
        public virtual DbSet<Lezioni> Lezioni { get; set; }
        public virtual DbSet<Studenti> Studenti { get; set; }
    
        public virtual int AddCorso(string nome, Nullable<System.DateTime> dataInizio, Nullable<System.DateTime> dataFine, string descrizione)
        {
            var nomeParameter = nome != null ?
                new ObjectParameter("nome", nome) :
                new ObjectParameter("nome", typeof(string));
    
            var dataInizioParameter = dataInizio.HasValue ?
                new ObjectParameter("dataInizio", dataInizio) :
                new ObjectParameter("dataInizio", typeof(System.DateTime));
    
            var dataFineParameter = dataFine.HasValue ?
                new ObjectParameter("dataFine", dataFine) :
                new ObjectParameter("dataFine", typeof(System.DateTime));
    
            var descrizioneParameter = descrizione != null ?
                new ObjectParameter("descrizione", descrizione) :
                new ObjectParameter("descrizione", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCorso", nomeParameter, dataInizioParameter, dataFineParameter, descrizioneParameter);
        }
    
        public virtual ObjectResult<AddLezione_Result> AddLezione(string corsoNome, string lezioneNome, Nullable<int> lezioneDurata, string lezioneDescrizione)
        {
            var corsoNomeParameter = corsoNome != null ?
                new ObjectParameter("CorsoNome", corsoNome) :
                new ObjectParameter("CorsoNome", typeof(string));
    
            var lezioneNomeParameter = lezioneNome != null ?
                new ObjectParameter("LezioneNome", lezioneNome) :
                new ObjectParameter("LezioneNome", typeof(string));
    
            var lezioneDurataParameter = lezioneDurata.HasValue ?
                new ObjectParameter("LezioneDurata", lezioneDurata) :
                new ObjectParameter("LezioneDurata", typeof(int));
    
            var lezioneDescrizioneParameter = lezioneDescrizione != null ?
                new ObjectParameter("LezioneDescrizione", lezioneDescrizione) :
                new ObjectParameter("LezioneDescrizione", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddLezione_Result>("AddLezione", corsoNomeParameter, lezioneNomeParameter, lezioneDurataParameter, lezioneDescrizioneParameter);
        }
    
        public virtual int Iscrizione(Nullable<int> idCorso, string idMatricola)
        {
            var idCorsoParameter = idCorso.HasValue ?
                new ObjectParameter("IdCorso", idCorso) :
                new ObjectParameter("IdCorso", typeof(int));
    
            var idMatricolaParameter = idMatricola != null ?
                new ObjectParameter("IdMatricola", idMatricola) :
                new ObjectParameter("IdMatricola", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Iscrizione", idCorsoParameter, idMatricolaParameter);
        }
    
        public virtual ObjectResult<ListaCorsi_Result> ListaCorsi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListaCorsi_Result>("ListaCorsi");
        }
    
        public virtual ObjectResult<ListaLezioni_Result> ListaLezioni(string nomeCorso)
        {
            var nomeCorsoParameter = nomeCorso != null ?
                new ObjectParameter("nomeCorso", nomeCorso) :
                new ObjectParameter("nomeCorso", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListaLezioni_Result>("ListaLezioni", nomeCorsoParameter);
        }
    }
}
